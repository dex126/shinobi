import pandas as pd
import dotenv
import logging
import os

from shinobi_bot import config

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.utils import executor


logging.basicConfig(level=logging.INFO)
dotenv.load_dotenv()

EXCEL_FILE = 'shinobi.xlsx'

bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


DAYS_OF_WEEK = {
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": None,
    "–í—Ç–æ—Ä–Ω–∏–∫": (8, 13),
    "–°—Ä–µ–¥–∞": (15, 20),
    "–ß–µ—Ç–≤–µ—Ä–≥": (22, 27),
    "–ü—è—Ç–Ω–∏—Ü–∞": (29, 34),
    "–°—É–±–±–æ—Ç–∞": (36, 41)
}

# –°–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–∞–±–∏–Ω–µ—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞—Ä–∞–º
classroom_indices = {
    3: 4,  # D -> E
    5: 6,  # F -> G
    7: 8,  # H -> I
    9: 10, # J -> K
    11: 12, # L -> M
    13: 14, # N -> O
    15: 16,# P -> Q
    17: 18,# R -> S
    19: 20,# T -> U
    21: 22,# V -> W
    23: 24,# X -> Y
    25: 26,# Z -> AA
    27: 28,# AB -> AC
    29: 30,# AD -> AE
    31: 32,# AF -> AG
    33: 34,# AH -> AI
    35: 36,# AJ -> AK
    37: 38,# AL -> AM
    39: 40,# AN -> AO
    41: 42,# AP -> AQ
    43: 44,# AR -> AS
    45: 46,# AT -> AU
    47: 48,# AV -> AW
    49: 50,# AX -> AY
    51: 52,# AZ -> BA
    53: 54,# BB -> BC
    55: 56,# BD -> BE
    57: 58,# BF -> BG
    59: 60,# BH -> BI
    61: 62,# BJ -> BK
    63: 64,# BL -> BM
    65: 66,# BN -> BO
    67: 68,# BP -> BQ
    69: 70,# BR -> BS
    71: 72,# BT -> BU
    73: 74 # BV -> BW
}


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    markup.add(item)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=markup)


@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def select_day(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for day in DAYS_OF_WEEK.keys():
        markup.add(day)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)


@dp.message_handler(lambda message: message.text in DAYS_OF_WEEK)
async def check_schedule(message: types.Message):
    selected_day = message.text
    df = pd.read_excel(EXCEL_FILE, sheet_name=1, header=None)  # –ß—Ç–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ª–∏—Å—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
    if selected_day in DAYS_OF_WEEK:
        if DAYS_OF_WEEK[selected_day] is None:
            await message.answer("–≠—Ç–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
            return
        
        start_row, end_row = DAYS_OF_WEEK[selected_day]
        day_schedule = df.iloc[start_row-1:end_row, [2, 27, 28]]  # –í—Ä–µ–º—è, –ù–∞–∑–≤–∞–Ω–∏–µ, –ö–∞–±–∏–Ω–µ—Ç
        day_schedule.columns = ['Time', 'Subject', 'Classroom']  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä
        if day_schedule.empty or day_schedule['Time'].isnull().all() or day_schedule['Subject'].isnull().all():
            await message.answer(f"–≠—Ç–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã
        response = f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {selected_day}\n–î–ª—è –≥—Ä—É–ø–ø—ã –ò–°–∏–ü-1-9-23:\n\n"
        for idx, row in day_schedule.iterrows():
            time = row['Time'] if pd.notna(row['Time']) else "–Ω–µ—Ç"
            subject = row['Subject'] if pd.notna(row['Subject']) else "–Ω–µ—Ç"
            classroom = row['Classroom'] if pd.notna(row['Classroom']) else "–Ω–µ—Ç"
            response += f"{time}  {subject}  {classroom}\n"

        # –ü–æ–∏—Å–∫ –ø–∞—Ä –ë–ñ –∏ –≤—ã–≤–æ–¥ –∏—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
        bzh_obzh_schedule = ""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        for idx in range(start_row-1, end_row):  # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            for col in range(3, 75):  # D (3) –¥–æ BW (74)
                if ("–ë–ñ" in str(df.iloc[idx, col]) or "–û–ë–ñ" in str(df.iloc[idx, col])):
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
                    time = df.iloc[idx, 2]  # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ C
                    classroom_index = col + 1  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–±–∏–Ω–µ—Ç (—Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü)
                    if classroom_index < df.shape[1]:
                        classroom = df.iloc[idx, classroom_index] if pd.notna(df.iloc[idx, classroom_index]) else "–Ω–µ—Ç"
                        bzh_obzh_schedule += f"{time}  {df.iloc[idx, col]}  {classroom}\n"

        if bzh_obzh_schedule:
            response +="\n–ü–∞—Ä—ã –ë–ñ –∏ –û–ë–ñ –≤ –¥–∞–Ω–Ω—ã–π –¥–µ–Ω—å:\n" + bzh_obzh_schedule
        else:
            response += "\n–ü–∞—Ä—ã –ë–ñ –∏ –û–ë–ñ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

        response += "\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ!\n–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—èüòä"
    
    else:
        await message.answer("–≠—Ç–æ–≥–æ –¥–Ω—è –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.")
        return

    await message.answer(response)

# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True)